package model.view;

import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed May 19 19:14:10 EDT 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PAtelierViewRowImpl
  extends ViewRowImpl
{
  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
   */
  public enum AttributesEnum
  {
    Noatel
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getNoatel();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setNoatel((Number)value);
      }
    }
    ,
    Noexpo
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getNoexpo();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setNoexpo((Number)value);
      }
    }
    ,
    Titre
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getTitre();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setTitre((String)value);
      }
    }
    ,
    Langue
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getLangue();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setLangue((String)value);
      }
    }
    ,
    AcetateElec
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getAcetateElec();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setAcetateElec((Number)value);
      }
    }
    ,
    Portable
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getPortable();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setPortable((Number)value);
      }
    }
    ,
    Duree
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getDuree();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setDuree((Number)value);
      }
    }
    ,
    Nbmaximum
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getNbmaximum();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setNbmaximum((Number)value);
      }
    }
    ,
    Noexposant
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getNoexposant();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setNoexposant((Number)value);
      }
    }
    ,
    Noecole
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getNoecole();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setNoecole((Number)value);
      }
    }
    ,
    Nocategorie
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getNocategorie();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setNocategorie((Number)value);
      }
    }
    ,
    Notype
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getNotype();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setNotype((Number)value);
      }
    }
    ,
    Nolocal
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getNolocal();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setNolocal((String)value);
      }
    }
    ,
    Dateatel
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getDateatel();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setDateatel((Date)value);
      }
    }
    ,
    Creepar
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getCreepar();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setCreepar((String)value);
      }
    }
    ,
    Datecreation
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getDatecreation();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setDatecreation((Date)value);
      }
    }
    ,
    Coutetudiant
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getCoutetudiant();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setCoutetudiant((Number)value);
      }
    }
    ,
    Coutregulier
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getCoutregulier();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setCoutregulier((Number)value);
      }
    }
    ,
    PEvaluationView
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getPEvaluationView();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ,
    PInscriptionView
    {
      public Object get(PAtelierViewRowImpl obj)
      {
        return obj.getPInscriptionView();
      }

      public void put(PAtelierViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static int firstIndex = 0;

    public abstract Object get(PAtelierViewRowImpl object);

    public abstract void put(PAtelierViewRowImpl object, Object value);

    public int index()
    {
      return AttributesEnum.firstIndex() + ordinal();
    }

    public static int firstIndex()
    {
      return firstIndex;
    }

    public static int count()
    {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    public static AttributesEnum[] staticValues()
    {
      if (vals == null)
      {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }
  public static final int NOATEL = AttributesEnum.Noatel.index();
  public static final int NOEXPO = AttributesEnum.Noexpo.index();
  public static final int TITRE = AttributesEnum.Titre.index();
  public static final int LANGUE = AttributesEnum.Langue.index();
  public static final int ACETATEELEC = AttributesEnum.AcetateElec.index();
  public static final int PORTABLE = AttributesEnum.Portable.index();
  public static final int DUREE = AttributesEnum.Duree.index();
  public static final int NBMAXIMUM = AttributesEnum.Nbmaximum.index();
  public static final int NOEXPOSANT = AttributesEnum.Noexposant.index();
  public static final int NOECOLE = AttributesEnum.Noecole.index();
  public static final int NOCATEGORIE = AttributesEnum.Nocategorie.index();
  public static final int NOTYPE = AttributesEnum.Notype.index();
  public static final int NOLOCAL = AttributesEnum.Nolocal.index();
  public static final int DATEATEL = AttributesEnum.Dateatel.index();
  public static final int CREEPAR = AttributesEnum.Creepar.index();
  public static final int DATECREATION = AttributesEnum.Datecreation.index();
  public static final int COUTETUDIANT = AttributesEnum.Coutetudiant.index();
  public static final int COUTREGULIER = AttributesEnum.Coutregulier.index();
  public static final int PEVALUATIONVIEW = AttributesEnum.PEvaluationView.index();
  public static final int PINSCRIPTIONVIEW = AttributesEnum.PInscriptionView.index();

  /**
   * This is the default constructor (do not remove).
   */
  public PAtelierViewRowImpl()
  {
  }

  /**
   * Gets PAtelier entity object.
   * @return the PAtelier
   */
  public EntityImpl getPAtelier()
  {
    return (EntityImpl) getEntity(0);
  }

  /**
   * Gets the attribute value for NOATEL using the alias name Noatel.
   * @return the NOATEL
   */
  public Number getNoatel()
  {
    return (Number) getAttributeInternal(NOATEL);
  }

  /**
   * Sets <code>value</code> as attribute value for NOATEL using the alias name Noatel.
   * @param value value to set the NOATEL
   */
  public void setNoatel(Number value)
  {
    setAttributeInternal(NOATEL, value);
  }

  /**
   * Gets the attribute value for NOEXPO using the alias name Noexpo.
   * @return the NOEXPO
   */
  public Number getNoexpo()
  {
    return (Number) getAttributeInternal(NOEXPO);
  }

  /**
   * Sets <code>value</code> as attribute value for NOEXPO using the alias name Noexpo.
   * @param value value to set the NOEXPO
   */
  public void setNoexpo(Number value)
  {
    setAttributeInternal(NOEXPO, value);
  }

  /**
   * Gets the attribute value for TITRE using the alias name Titre.
   * @return the TITRE
   */
  public String getTitre()
  {
    return (String) getAttributeInternal(TITRE);
  }

  /**
   * Sets <code>value</code> as attribute value for TITRE using the alias name Titre.
   * @param value value to set the TITRE
   */
  public void setTitre(String value)
  {
    setAttributeInternal(TITRE, value);
  }

  /**
   * Gets the attribute value for LANGUE using the alias name Langue.
   * @return the LANGUE
   */
  public String getLangue()
  {
    return (String) getAttributeInternal(LANGUE);
  }

  /**
   * Sets <code>value</code> as attribute value for LANGUE using the alias name Langue.
   * @param value value to set the LANGUE
   */
  public void setLangue(String value)
  {
    setAttributeInternal(LANGUE, value);
  }

  /**
   * Gets the attribute value for ACETATE_ELEC using the alias name AcetateElec.
   * @return the ACETATE_ELEC
   */
  public Number getAcetateElec()
  {
    return (Number) getAttributeInternal(ACETATEELEC);
  }

  /**
   * Sets <code>value</code> as attribute value for ACETATE_ELEC using the alias name AcetateElec.
   * @param value value to set the ACETATE_ELEC
   */
  public void setAcetateElec(Number value)
  {
    setAttributeInternal(ACETATEELEC, value);
  }

  /**
   * Gets the attribute value for PORTABLE using the alias name Portable.
   * @return the PORTABLE
   */
  public Number getPortable()
  {
    return (Number) getAttributeInternal(PORTABLE);
  }

  /**
   * Sets <code>value</code> as attribute value for PORTABLE using the alias name Portable.
   * @param value value to set the PORTABLE
   */
  public void setPortable(Number value)
  {
    setAttributeInternal(PORTABLE, value);
  }

  /**
   * Gets the attribute value for DUREE using the alias name Duree.
   * @return the DUREE
   */
  public Number getDuree()
  {
    return (Number) getAttributeInternal(DUREE);
  }

  /**
   * Sets <code>value</code> as attribute value for DUREE using the alias name Duree.
   * @param value value to set the DUREE
   */
  public void setDuree(Number value)
  {
    setAttributeInternal(DUREE, value);
  }

  /**
   * Gets the attribute value for NBMAXIMUM using the alias name Nbmaximum.
   * @return the NBMAXIMUM
   */
  public Number getNbmaximum()
  {
    return (Number) getAttributeInternal(NBMAXIMUM);
  }

  /**
   * Sets <code>value</code> as attribute value for NBMAXIMUM using the alias name Nbmaximum.
   * @param value value to set the NBMAXIMUM
   */
  public void setNbmaximum(Number value)
  {
    setAttributeInternal(NBMAXIMUM, value);
  }

  /**
   * Gets the attribute value for NOEXPOSANT using the alias name Noexposant.
   * @return the NOEXPOSANT
   */
  public Number getNoexposant()
  {
    return (Number) getAttributeInternal(NOEXPOSANT);
  }

  /**
   * Sets <code>value</code> as attribute value for NOEXPOSANT using the alias name Noexposant.
   * @param value value to set the NOEXPOSANT
   */
  public void setNoexposant(Number value)
  {
    setAttributeInternal(NOEXPOSANT, value);
  }

  /**
   * Gets the attribute value for NOECOLE using the alias name Noecole.
   * @return the NOECOLE
   */
  public Number getNoecole()
  {
    return (Number) getAttributeInternal(NOECOLE);
  }

  /**
   * Sets <code>value</code> as attribute value for NOECOLE using the alias name Noecole.
   * @param value value to set the NOECOLE
   */
  public void setNoecole(Number value)
  {
    setAttributeInternal(NOECOLE, value);
  }

  /**
   * Gets the attribute value for NOCATEGORIE using the alias name Nocategorie.
   * @return the NOCATEGORIE
   */
  public Number getNocategorie()
  {
    return (Number) getAttributeInternal(NOCATEGORIE);
  }

  /**
   * Sets <code>value</code> as attribute value for NOCATEGORIE using the alias name Nocategorie.
   * @param value value to set the NOCATEGORIE
   */
  public void setNocategorie(Number value)
  {
    setAttributeInternal(NOCATEGORIE, value);
  }

  /**
   * Gets the attribute value for NOTYPE using the alias name Notype.
   * @return the NOTYPE
   */
  public Number getNotype()
  {
    return (Number) getAttributeInternal(NOTYPE);
  }

  /**
   * Sets <code>value</code> as attribute value for NOTYPE using the alias name Notype.
   * @param value value to set the NOTYPE
   */
  public void setNotype(Number value)
  {
    setAttributeInternal(NOTYPE, value);
  }

  /**
   * Gets the attribute value for NOLOCAL using the alias name Nolocal.
   * @return the NOLOCAL
   */
  public String getNolocal()
  {
    return (String) getAttributeInternal(NOLOCAL);
  }

  /**
   * Sets <code>value</code> as attribute value for NOLOCAL using the alias name Nolocal.
   * @param value value to set the NOLOCAL
   */
  public void setNolocal(String value)
  {
    setAttributeInternal(NOLOCAL, value);
  }

  /**
   * Gets the attribute value for DATEATEL using the alias name Dateatel.
   * @return the DATEATEL
   */
  public Date getDateatel()
  {
    return (Date) getAttributeInternal(DATEATEL);
  }

  /**
   * Sets <code>value</code> as attribute value for DATEATEL using the alias name Dateatel.
   * @param value value to set the DATEATEL
   */
  public void setDateatel(Date value)
  {
    setAttributeInternal(DATEATEL, value);
  }

  /**
   * Gets the attribute value for CREEPAR using the alias name Creepar.
   * @return the CREEPAR
   */
  public String getCreepar()
  {
    return (String) getAttributeInternal(CREEPAR);
  }

  /**
   * Sets <code>value</code> as attribute value for CREEPAR using the alias name Creepar.
   * @param value value to set the CREEPAR
   */
  public void setCreepar(String value)
  {
    setAttributeInternal(CREEPAR, value);
  }

  /**
   * Gets the attribute value for DATECREATION using the alias name Datecreation.
   * @return the DATECREATION
   */
  public Date getDatecreation()
  {
    return (Date) getAttributeInternal(DATECREATION);
  }

  /**
   * Sets <code>value</code> as attribute value for DATECREATION using the alias name Datecreation.
   * @param value value to set the DATECREATION
   */
  public void setDatecreation(Date value)
  {
    setAttributeInternal(DATECREATION, value);
  }

  /**
   * Gets the attribute value for COUTETUDIANT using the alias name Coutetudiant.
   * @return the COUTETUDIANT
   */
  public Number getCoutetudiant()
  {
    return (Number) getAttributeInternal(COUTETUDIANT);
  }

  /**
   * Sets <code>value</code> as attribute value for COUTETUDIANT using the alias name Coutetudiant.
   * @param value value to set the COUTETUDIANT
   */
  public void setCoutetudiant(Number value)
  {
    setAttributeInternal(COUTETUDIANT, value);
  }

  /**
   * Gets the attribute value for COUTREGULIER using the alias name Coutregulier.
   * @return the COUTREGULIER
   */
  public Number getCoutregulier()
  {
    return (Number) getAttributeInternal(COUTREGULIER);
  }

  /**
   * Sets <code>value</code> as attribute value for COUTREGULIER using the alias name Coutregulier.
   * @param value value to set the COUTREGULIER
   */
  public void setCoutregulier(Number value)
  {
    setAttributeInternal(COUTREGULIER, value);
  }

  /**
   * Gets the associated <code>RowIterator</code> using master-detail link PEvaluationView.
   */
  public RowIterator getPEvaluationView()
  {
    return (RowIterator) getAttributeInternal(PEVALUATIONVIEW);
  }

  /**
   * Gets the associated <code>RowIterator</code> using master-detail link PInscriptionView.
   */
  public RowIterator getPInscriptionView()
  {
    return (RowIterator) getAttributeInternal(PINSCRIPTIONVIEW);
  }

  /**
   * getAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param attrDef the attribute

   * @return the attribute value
   * @throws Exception
   */
  protected Object getAttrInvokeAccessor(int index,
                                         AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * setAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param value the value to assign to the attribute
   * @param attrDef the attribute

   * @throws Exception
   */
  protected void setAttrInvokeAccessor(int index, Object value,
                                       AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }

  /**
   * Sample exportable method.
   */
  public void samplePAtelierViewRowImplExportable()
  {
  }

  /**
   * Sample exportable method.
   */
  public void samplePAtelierViewRowImplExportable2(String testParam1)
  {
  }
}
