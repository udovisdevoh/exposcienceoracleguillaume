package model.view;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed May 19 18:38:04 EDT 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PEvaluationViewRowImpl
  extends ViewRowImpl
{
  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
   */
  public enum AttributesEnum
  {
    Noeval
    {
      public Object get(PEvaluationViewRowImpl obj)
      {
        return obj.getNoeval();
      }

      public void put(PEvaluationViewRowImpl obj, Object value)
      {
        obj.setNoeval((Number)value);
      }
    }
    ,
    Noauditeur
    {
      public Object get(PEvaluationViewRowImpl obj)
      {
        return obj.getNoauditeur();
      }

      public void put(PEvaluationViewRowImpl obj, Object value)
      {
        obj.setNoauditeur((Number)value);
      }
    }
    ,
    Noatel
    {
      public Object get(PEvaluationViewRowImpl obj)
      {
        return obj.getNoatel();
      }

      public void put(PEvaluationViewRowImpl obj, Object value)
      {
        obj.setNoatel((Number)value);
      }
    }
    ,
    Nocritere
    {
      public Object get(PEvaluationViewRowImpl obj)
      {
        return obj.getNocritere();
      }

      public void put(PEvaluationViewRowImpl obj, Object value)
      {
        obj.setNocritere((Number)value);
      }
    }
    ,
    Cote
    {
      public Object get(PEvaluationViewRowImpl obj)
      {
        return obj.getCote();
      }

      public void put(PEvaluationViewRowImpl obj, Object value)
      {
        obj.setCote((Number)value);
      }
    }
    ,
    PCritereView1
    {
      public Object get(PEvaluationViewRowImpl obj)
      {
        return obj.getPCritereView1();
      }

      public void put(PEvaluationViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ,
    PAtelierView1
    {
      public Object get(PEvaluationViewRowImpl obj)
      {
        return obj.getPAtelierView1();
      }

      public void put(PEvaluationViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static int firstIndex = 0;

    public abstract Object get(PEvaluationViewRowImpl object);

    public abstract void put(PEvaluationViewRowImpl object, Object value);

    public int index()
    {
      return AttributesEnum.firstIndex() + ordinal();
    }

    public static int firstIndex()
    {
      return firstIndex;
    }

    public static int count()
    {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    public static AttributesEnum[] staticValues()
    {
      if (vals == null)
      {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }
  public static final int NOEVAL = AttributesEnum.Noeval.index();
  public static final int NOAUDITEUR = AttributesEnum.Noauditeur.index();
  public static final int NOATEL = AttributesEnum.Noatel.index();
  public static final int NOCRITERE = AttributesEnum.Nocritere.index();
  public static final int COTE = AttributesEnum.Cote.index();
  public static final int PCRITEREVIEW1 = AttributesEnum.PCritereView1.index();

  public static final int PATELIERVIEW1 = AttributesEnum.PAtelierView1.index();

  /**
   * This is the default constructor (do not remove).
   */
  public PEvaluationViewRowImpl()
  {
  }

  /**
   * Gets PEvaluation entity object.
   * @return the PEvaluation
   */
  public EntityImpl getPEvaluation()
  {
    return (EntityImpl) getEntity(0);
  }

  /**
   * Gets the attribute value for NOEVAL using the alias name Noeval.
   * @return the NOEVAL
   */
  public Number getNoeval()
  {
    return (Number) getAttributeInternal(NOEVAL);
  }

  /**
   * Sets <code>value</code> as attribute value for NOEVAL using the alias name Noeval.
   * @param value value to set the NOEVAL
   */
  public void setNoeval(Number value)
  {
    setAttributeInternal(NOEVAL, value);
  }

  /**
   * Gets the attribute value for NOAUDITEUR using the alias name Noauditeur.
   * @return the NOAUDITEUR
   */
  public Number getNoauditeur()
  {
    return (Number) getAttributeInternal(NOAUDITEUR);
  }

  /**
   * Sets <code>value</code> as attribute value for NOAUDITEUR using the alias name Noauditeur.
   * @param value value to set the NOAUDITEUR
   */
  public void setNoauditeur(Number value)
  {
    setAttributeInternal(NOAUDITEUR, value);
  }

  /**
   * Gets the attribute value for NOATEL using the alias name Noatel.
   * @return the NOATEL
   */
  public Number getNoatel()
  {
    return (Number) getAttributeInternal(NOATEL);
  }

  /**
   * Sets <code>value</code> as attribute value for NOATEL using the alias name Noatel.
   * @param value value to set the NOATEL
   */
  public void setNoatel(Number value)
  {
    setAttributeInternal(NOATEL, value);
  }

  /**
   * Gets the attribute value for NOCRITERE using the alias name Nocritere.
   * @return the NOCRITERE
   */
  public Number getNocritere()
  {
    return (Number) getAttributeInternal(NOCRITERE);
  }

  /**
   * Sets <code>value</code> as attribute value for NOCRITERE using the alias name Nocritere.
   * @param value value to set the NOCRITERE
   */
  public void setNocritere(Number value)
  {
    setAttributeInternal(NOCRITERE, value);
  }

  /**
   * Gets the attribute value for COTE using the alias name Cote.
   * @return the COTE
   */
  public Number getCote()
  {
    return (Number) getAttributeInternal(COTE);
  }

  /**
   * Sets <code>value</code> as attribute value for COTE using the alias name Cote.
   * @param value value to set the COTE
   */
  public void setCote(Number value)
  {
    setAttributeInternal(COTE, value);
  }

  /**
   * Gets the view accessor <code>RowSet</code> PCritereView1.
   */
  public RowSet getPCritereView1()
  {
    return (RowSet) getAttributeInternal(PCRITEREVIEW1);
  }

  /**
   * Gets the view accessor <code>RowSet</code> PAtelierView1.
   */
  public RowSet getPAtelierView1()
  {
    return (RowSet) getAttributeInternal(PATELIERVIEW1);
  }

  /**
   * getAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param attrDef the attribute

   * @return the attribute value
   * @throws Exception
   */
  protected Object getAttrInvokeAccessor(int index,
                                         AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * setAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param value the value to assign to the attribute
   * @param attrDef the attribute

   * @throws Exception
   */
  protected void setAttrInvokeAccessor(int index, Object value,
                                       AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }

  /**
   * Sample exportable method.
   */
  public void samplePEvaluationViewRowImplExportable()
  {
  }

  /**
   * Sample exportable method.
   */
  public void samplePEvaluationViewRowImplExportable2(String testParam1)
  {
  }
}
